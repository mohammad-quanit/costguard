{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "SignUpLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/CostGuard-dev-signUp"
      }
    },
    "SignInLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/CostGuard-dev-signIn"
      }
    },
    "RefreshTokenLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/CostGuard-dev-refreshToken"
      }
    },
    "GetUserProfileLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/CostGuard-dev-getUserProfile"
      }
    },
    "UpdateUserProfileLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/CostGuard-dev-updateUserProfile"
      }
    },
    "SetBudgetLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/CostGuard-dev-setBudget"
      }
    },
    "GetBudgetLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/CostGuard-dev-getBudget"
      }
    },
    "CostAlertLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/CostGuard-dev-costAlert"
      }
    },
    "AlertProcessorLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/CostGuard-dev-alertProcessor"
      }
    },
    "TriggerAlertsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/CostGuard-dev-triggerAlerts"
      }
    },
    "GetCostDataLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/CostGuard-dev-getCostData"
      }
    },
    "SesEmailVerifierLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/CostGuard-dev-sesEmailVerifier"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "CostGuard",
                  "dev",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup",
                    "logs:TagResource"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/CostGuard-dev*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/CostGuard-dev*:*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "ce:GetCostAndUsage",
                    "ce:GetDimensionValues",
                    "ce:GetUsageReport"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "budgets:ViewBudget",
                    "budgets:DescribeBudgets",
                    "budgets:DescribeBudget"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "sts:GetCallerIdentity"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "cognito-idp:AdminCreateUser",
                    "cognito-idp:AdminSetUserPassword",
                    "cognito-idp:AdminInitiateAuth",
                    "cognito-idp:AdminGetUser",
                    "cognito-idp:AdminUpdateUserAttributes",
                    "cognito-idp:AdminDeleteUser",
                    "cognito-idp:ListUsers"
                  ],
                  "Resource": {
                    "Fn::GetAtt": [
                      "CostGuardUserPool",
                      "Arn"
                    ]
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:Query",
                    "dynamodb:Scan",
                    "dynamodb:GetItem",
                    "dynamodb:PutItem",
                    "dynamodb:UpdateItem",
                    "dynamodb:DeleteItem"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "UsersTable",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::Sub": "${UsersTable.Arn}/index/*"
                    },
                    {
                      "Fn::GetAtt": [
                        "CloudBudgetSettingsTable",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::Sub": "${CloudBudgetSettingsTable.Arn}/index/*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "sns:Publish",
                    "ses:SendEmail",
                    "ses:SendRawEmail",
                    "ses:VerifyEmailIdentity",
                    "ses:ListVerifiedEmailAddresses",
                    "ses:GetIdentityVerificationAttributes"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "CostGuard",
              "dev",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        }
      }
    },
    "SignUpLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-de0c9720-9574",
          "S3Key": "serverless/CostGuard/dev/1751050125115-2025-06-27T18:48:45.115Z/CostGuard.zip"
        },
        "Handler": "src/functions/Auth/signUp.handler",
        "Runtime": "nodejs22.x",
        "FunctionName": "CostGuard-dev-signUp",
        "MemorySize": 1024,
        "Timeout": 6,
        "Description": "User registration with Cognito",
        "Environment": {
          "Variables": {
            "COST_ALERT_TOPIC": "your-sns-topic-arn",
            "COST_ALERT_TABLE": "your-dynamodb-table-name",
            "DAILY_THRESHOLD_PERCENT": "50",
            "MONTHLY_BUDGET": "50",
            "AWS_ACCOUNT_ID": "",
            "USER_POOL_ID": {
              "Ref": "CostGuardUserPool"
            },
            "USER_POOL_CLIENT_ID": {
              "Ref": "CostGuardUserPoolClient"
            },
            "USERS_TABLE": {
              "Ref": "UsersTable"
            },
            "CLOUD_BUDGET_SETTINGS_TABLE": {
              "Ref": "CloudBudgetSettingsTable"
            },
            "JWT_SECRET": "your-super-secret-jwt-key-change-this-in-production"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "SignUpLogGroup"
      ]
    },
    "SignInLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-de0c9720-9574",
          "S3Key": "serverless/CostGuard/dev/1751050125115-2025-06-27T18:48:45.115Z/CostGuard.zip"
        },
        "Handler": "src/functions/Auth/signIn.handler",
        "Runtime": "nodejs22.x",
        "FunctionName": "CostGuard-dev-signIn",
        "MemorySize": 1024,
        "Timeout": 6,
        "Description": "User login with Cognito",
        "Environment": {
          "Variables": {
            "COST_ALERT_TOPIC": "your-sns-topic-arn",
            "COST_ALERT_TABLE": "your-dynamodb-table-name",
            "DAILY_THRESHOLD_PERCENT": "50",
            "MONTHLY_BUDGET": "50",
            "AWS_ACCOUNT_ID": "",
            "USER_POOL_ID": {
              "Ref": "CostGuardUserPool"
            },
            "USER_POOL_CLIENT_ID": {
              "Ref": "CostGuardUserPoolClient"
            },
            "USERS_TABLE": {
              "Ref": "UsersTable"
            },
            "CLOUD_BUDGET_SETTINGS_TABLE": {
              "Ref": "CloudBudgetSettingsTable"
            },
            "JWT_SECRET": "your-super-secret-jwt-key-change-this-in-production"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "SignInLogGroup"
      ]
    },
    "RefreshTokenLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-de0c9720-9574",
          "S3Key": "serverless/CostGuard/dev/1751050125115-2025-06-27T18:48:45.115Z/CostGuard.zip"
        },
        "Handler": "src/functions/Auth/refreshToken.handler",
        "Runtime": "nodejs22.x",
        "FunctionName": "CostGuard-dev-refreshToken",
        "MemorySize": 1024,
        "Timeout": 6,
        "Description": "Refresh JWT token",
        "Environment": {
          "Variables": {
            "COST_ALERT_TOPIC": "your-sns-topic-arn",
            "COST_ALERT_TABLE": "your-dynamodb-table-name",
            "DAILY_THRESHOLD_PERCENT": "50",
            "MONTHLY_BUDGET": "50",
            "AWS_ACCOUNT_ID": "",
            "USER_POOL_ID": {
              "Ref": "CostGuardUserPool"
            },
            "USER_POOL_CLIENT_ID": {
              "Ref": "CostGuardUserPoolClient"
            },
            "USERS_TABLE": {
              "Ref": "UsersTable"
            },
            "CLOUD_BUDGET_SETTINGS_TABLE": {
              "Ref": "CloudBudgetSettingsTable"
            },
            "JWT_SECRET": "your-super-secret-jwt-key-change-this-in-production"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "RefreshTokenLogGroup"
      ]
    },
    "GetUserProfileLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-de0c9720-9574",
          "S3Key": "serverless/CostGuard/dev/1751050125115-2025-06-27T18:48:45.115Z/CostGuard.zip"
        },
        "Handler": "src/functions/Auth/getUserProfile.handler",
        "Runtime": "nodejs22.x",
        "FunctionName": "CostGuard-dev-getUserProfile",
        "MemorySize": 1024,
        "Timeout": 6,
        "Description": "Get user profile information",
        "Environment": {
          "Variables": {
            "COST_ALERT_TOPIC": "your-sns-topic-arn",
            "COST_ALERT_TABLE": "your-dynamodb-table-name",
            "DAILY_THRESHOLD_PERCENT": "50",
            "MONTHLY_BUDGET": "50",
            "AWS_ACCOUNT_ID": "",
            "USER_POOL_ID": {
              "Ref": "CostGuardUserPool"
            },
            "USER_POOL_CLIENT_ID": {
              "Ref": "CostGuardUserPoolClient"
            },
            "USERS_TABLE": {
              "Ref": "UsersTable"
            },
            "CLOUD_BUDGET_SETTINGS_TABLE": {
              "Ref": "CloudBudgetSettingsTable"
            },
            "JWT_SECRET": "your-super-secret-jwt-key-change-this-in-production"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetUserProfileLogGroup"
      ]
    },
    "UpdateUserProfileLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-de0c9720-9574",
          "S3Key": "serverless/CostGuard/dev/1751050125115-2025-06-27T18:48:45.115Z/CostGuard.zip"
        },
        "Handler": "src/functions/Auth/updateUserProfile.handler",
        "Runtime": "nodejs22.x",
        "FunctionName": "CostGuard-dev-updateUserProfile",
        "MemorySize": 1024,
        "Timeout": 6,
        "Description": "Update user profile information",
        "Environment": {
          "Variables": {
            "COST_ALERT_TOPIC": "your-sns-topic-arn",
            "COST_ALERT_TABLE": "your-dynamodb-table-name",
            "DAILY_THRESHOLD_PERCENT": "50",
            "MONTHLY_BUDGET": "50",
            "AWS_ACCOUNT_ID": "",
            "USER_POOL_ID": {
              "Ref": "CostGuardUserPool"
            },
            "USER_POOL_CLIENT_ID": {
              "Ref": "CostGuardUserPoolClient"
            },
            "USERS_TABLE": {
              "Ref": "UsersTable"
            },
            "CLOUD_BUDGET_SETTINGS_TABLE": {
              "Ref": "CloudBudgetSettingsTable"
            },
            "JWT_SECRET": "your-super-secret-jwt-key-change-this-in-production"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "UpdateUserProfileLogGroup"
      ]
    },
    "SetBudgetLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-de0c9720-9574",
          "S3Key": "serverless/CostGuard/dev/1751050125115-2025-06-27T18:48:45.115Z/CostGuard.zip"
        },
        "Handler": "src/functions/Budget/setBudgetHandler.handler",
        "Runtime": "nodejs22.x",
        "FunctionName": "CostGuard-dev-setBudget",
        "MemorySize": 1024,
        "Timeout": 6,
        "Description": "Set or update user's cloud budget settings",
        "Environment": {
          "Variables": {
            "COST_ALERT_TOPIC": "your-sns-topic-arn",
            "COST_ALERT_TABLE": "your-dynamodb-table-name",
            "DAILY_THRESHOLD_PERCENT": "50",
            "MONTHLY_BUDGET": "50",
            "AWS_ACCOUNT_ID": "",
            "USER_POOL_ID": {
              "Ref": "CostGuardUserPool"
            },
            "USER_POOL_CLIENT_ID": {
              "Ref": "CostGuardUserPoolClient"
            },
            "USERS_TABLE": {
              "Ref": "UsersTable"
            },
            "CLOUD_BUDGET_SETTINGS_TABLE": {
              "Ref": "CloudBudgetSettingsTable"
            },
            "JWT_SECRET": "your-super-secret-jwt-key-change-this-in-production"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "SetBudgetLogGroup"
      ]
    },
    "GetBudgetLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-de0c9720-9574",
          "S3Key": "serverless/CostGuard/dev/1751050125115-2025-06-27T18:48:45.115Z/CostGuard.zip"
        },
        "Handler": "src/functions/Budget/getBudgetHandler.handler",
        "Runtime": "nodejs22.x",
        "FunctionName": "CostGuard-dev-getBudget",
        "MemorySize": 1024,
        "Timeout": 6,
        "Description": "Get user's current budget settings",
        "Environment": {
          "Variables": {
            "COST_ALERT_TOPIC": "your-sns-topic-arn",
            "COST_ALERT_TABLE": "your-dynamodb-table-name",
            "DAILY_THRESHOLD_PERCENT": "50",
            "MONTHLY_BUDGET": "50",
            "AWS_ACCOUNT_ID": "",
            "USER_POOL_ID": {
              "Ref": "CostGuardUserPool"
            },
            "USER_POOL_CLIENT_ID": {
              "Ref": "CostGuardUserPoolClient"
            },
            "USERS_TABLE": {
              "Ref": "UsersTable"
            },
            "CLOUD_BUDGET_SETTINGS_TABLE": {
              "Ref": "CloudBudgetSettingsTable"
            },
            "JWT_SECRET": "your-super-secret-jwt-key-change-this-in-production"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetBudgetLogGroup"
      ]
    },
    "CostAlertLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-de0c9720-9574",
          "S3Key": "serverless/CostGuard/dev/1751050125115-2025-06-27T18:48:45.115Z/CostGuard.zip"
        },
        "Handler": "src/functions/CostAlert/costAlertHandler.handler",
        "Runtime": "nodejs22.x",
        "FunctionName": "CostGuard-dev-costAlert",
        "MemorySize": 1024,
        "Timeout": 6,
        "Description": "Scheduled Lambda to check AWS cost and alert users",
        "Environment": {
          "Variables": {
            "COST_ALERT_TOPIC": "your-sns-topic-arn",
            "COST_ALERT_TABLE": "your-dynamodb-table-name",
            "DAILY_THRESHOLD_PERCENT": "50",
            "MONTHLY_BUDGET": "50",
            "AWS_ACCOUNT_ID": "",
            "USER_POOL_ID": {
              "Ref": "CostGuardUserPool"
            },
            "USER_POOL_CLIENT_ID": {
              "Ref": "CostGuardUserPoolClient"
            },
            "USERS_TABLE": {
              "Ref": "UsersTable"
            },
            "CLOUD_BUDGET_SETTINGS_TABLE": {
              "Ref": "CloudBudgetSettingsTable"
            },
            "JWT_SECRET": "your-super-secret-jwt-key-change-this-in-production"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "CostAlertLogGroup"
      ]
    },
    "AlertProcessorLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-de0c9720-9574",
          "S3Key": "serverless/CostGuard/dev/1751050125115-2025-06-27T18:48:45.115Z/CostGuard.zip"
        },
        "Handler": "src/functions/Alerts/alertProcessor.handler",
        "Runtime": "nodejs22.x",
        "FunctionName": "CostGuard-dev-alertProcessor",
        "MemorySize": 1024,
        "Timeout": 300,
        "Description": "Scheduled alert processor for budget monitoring",
        "Environment": {
          "Variables": {
            "COST_ALERT_TOPIC": "your-sns-topic-arn",
            "COST_ALERT_TABLE": "your-dynamodb-table-name",
            "DAILY_THRESHOLD_PERCENT": "50",
            "MONTHLY_BUDGET": "50",
            "AWS_ACCOUNT_ID": "",
            "USER_POOL_ID": {
              "Ref": "CostGuardUserPool"
            },
            "USER_POOL_CLIENT_ID": {
              "Ref": "CostGuardUserPoolClient"
            },
            "USERS_TABLE": {
              "Ref": "UsersTable"
            },
            "CLOUD_BUDGET_SETTINGS_TABLE": {
              "Ref": "CloudBudgetSettingsTable"
            },
            "JWT_SECRET": "your-super-secret-jwt-key-change-this-in-production",
            "ALERT_SNS_TOPIC": {
              "Ref": "AlertSNSTopic"
            },
            "FROM_EMAIL": "muhammadquanit@gmail.com",
            "DEFAULT_ALERT_EMAIL": "muhammadquanit@gmail.com"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "AlertProcessorLogGroup"
      ]
    },
    "TriggerAlertsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-de0c9720-9574",
          "S3Key": "serverless/CostGuard/dev/1751050125115-2025-06-27T18:48:45.115Z/CostGuard.zip"
        },
        "Handler": "src/functions/Alerts/triggerAlerts.handler",
        "Runtime": "nodejs22.x",
        "FunctionName": "CostGuard-dev-triggerAlerts",
        "MemorySize": 1024,
        "Timeout": 29,
        "Description": "Manual alert trigger API endpoint",
        "Environment": {
          "Variables": {
            "COST_ALERT_TOPIC": "your-sns-topic-arn",
            "COST_ALERT_TABLE": "your-dynamodb-table-name",
            "DAILY_THRESHOLD_PERCENT": "50",
            "MONTHLY_BUDGET": "50",
            "AWS_ACCOUNT_ID": "",
            "USER_POOL_ID": {
              "Ref": "CostGuardUserPool"
            },
            "USER_POOL_CLIENT_ID": {
              "Ref": "CostGuardUserPoolClient"
            },
            "USERS_TABLE": {
              "Ref": "UsersTable"
            },
            "CLOUD_BUDGET_SETTINGS_TABLE": {
              "Ref": "CloudBudgetSettingsTable"
            },
            "JWT_SECRET": "your-super-secret-jwt-key-change-this-in-production",
            "ALERT_SNS_TOPIC": {
              "Ref": "AlertSNSTopic"
            },
            "FROM_EMAIL": "",
            "DEFAULT_ALERT_EMAIL": "muhammadquanit@gmail.com"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "TriggerAlertsLogGroup"
      ]
    },
    "GetCostDataLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-de0c9720-9574",
          "S3Key": "serverless/CostGuard/dev/1751050125115-2025-06-27T18:48:45.115Z/CostGuard.zip"
        },
        "Handler": "src/functions/CostData/index.GetCostAndUsageHandler",
        "Runtime": "nodejs22.x",
        "FunctionName": "CostGuard-dev-getCostData",
        "MemorySize": 1024,
        "Timeout": 6,
        "Description": "API to fetch cost data from DynamoDB (protected)",
        "Environment": {
          "Variables": {
            "COST_ALERT_TOPIC": "your-sns-topic-arn",
            "COST_ALERT_TABLE": "your-dynamodb-table-name",
            "DAILY_THRESHOLD_PERCENT": "50",
            "MONTHLY_BUDGET": "50",
            "AWS_ACCOUNT_ID": "",
            "USER_POOL_ID": {
              "Ref": "CostGuardUserPool"
            },
            "USER_POOL_CLIENT_ID": {
              "Ref": "CostGuardUserPoolClient"
            },
            "USERS_TABLE": {
              "Ref": "UsersTable"
            },
            "CLOUD_BUDGET_SETTINGS_TABLE": {
              "Ref": "CloudBudgetSettingsTable"
            },
            "JWT_SECRET": "your-super-secret-jwt-key-change-this-in-production"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetCostDataLogGroup"
      ]
    },
    "SesEmailVerifierLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-de0c9720-9574",
          "S3Key": "serverless/CostGuard/dev/1751050125115-2025-06-27T18:48:45.115Z/CostGuard.zip"
        },
        "Handler": "src/functions/Auth/sesEmailVerifier.handler",
        "Runtime": "nodejs22.x",
        "FunctionName": "CostGuard-dev-sesEmailVerifier",
        "MemorySize": 1024,
        "Timeout": 30,
        "Description": "Automatically verify user emails in SES after Cognito confirmation",
        "Environment": {
          "Variables": {
            "COST_ALERT_TOPIC": "your-sns-topic-arn",
            "COST_ALERT_TABLE": "your-dynamodb-table-name",
            "DAILY_THRESHOLD_PERCENT": "50",
            "MONTHLY_BUDGET": "50",
            "AWS_ACCOUNT_ID": "",
            "USER_POOL_ID": {
              "Ref": "CostGuardUserPool"
            },
            "USER_POOL_CLIENT_ID": {
              "Ref": "CostGuardUserPoolClient"
            },
            "USERS_TABLE": {
              "Ref": "UsersTable"
            },
            "CLOUD_BUDGET_SETTINGS_TABLE": {
              "Ref": "CloudBudgetSettingsTable"
            },
            "JWT_SECRET": "your-super-secret-jwt-key-change-this-in-production"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "SesEmailVerifierLogGroup"
      ]
    },
    "SignUpLambdaVersionrA4VNHd9X32PtkIZeKEdFOw8KSe7o86yEwB34N0uA": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "SignUpLambdaFunction"
        },
        "CodeSha256": "5Q/D3M4MX/t7Up3uJfpnLSRjVzpd+kSQ0kuBvYNsobo=",
        "Description": "User registration with Cognito"
      }
    },
    "SignInLambdaVersion8sMvixCWO1lo1Vgwyp8huE5azTpFNIfuSS7iHyDqwkQ": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "SignInLambdaFunction"
        },
        "CodeSha256": "5Q/D3M4MX/t7Up3uJfpnLSRjVzpd+kSQ0kuBvYNsobo=",
        "Description": "User login with Cognito"
      }
    },
    "RefreshTokenLambdaVersiongjyvC5EhFICmfr8I9vJlbVCZSeaNI1l5EF8lJzZogE": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "RefreshTokenLambdaFunction"
        },
        "CodeSha256": "5Q/D3M4MX/t7Up3uJfpnLSRjVzpd+kSQ0kuBvYNsobo=",
        "Description": "Refresh JWT token"
      }
    },
    "GetUserProfileLambdaVersion3ZkmrwPchYbnpkawSrl49byP7rtml5TTnykZ3FIxKyc": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetUserProfileLambdaFunction"
        },
        "CodeSha256": "5Q/D3M4MX/t7Up3uJfpnLSRjVzpd+kSQ0kuBvYNsobo=",
        "Description": "Get user profile information"
      }
    },
    "UpdateUserProfileLambdaVersionqDrOGsSpts83S2ose65ztmtvnXoLM5mxWa8feirA": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdateUserProfileLambdaFunction"
        },
        "CodeSha256": "5Q/D3M4MX/t7Up3uJfpnLSRjVzpd+kSQ0kuBvYNsobo=",
        "Description": "Update user profile information"
      }
    },
    "SetBudgetLambdaVersionoFC7UJTcEtRCtlM0b2wZlVxavlBNfHJteRIehVNOY": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "SetBudgetLambdaFunction"
        },
        "CodeSha256": "5Q/D3M4MX/t7Up3uJfpnLSRjVzpd+kSQ0kuBvYNsobo=",
        "Description": "Set or update user's cloud budget settings"
      }
    },
    "GetBudgetLambdaVersionQsslNekAxkhGokYdIZjmh0s3x57hAqv7tENMqyNuSlY": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetBudgetLambdaFunction"
        },
        "CodeSha256": "5Q/D3M4MX/t7Up3uJfpnLSRjVzpd+kSQ0kuBvYNsobo=",
        "Description": "Get user's current budget settings"
      }
    },
    "CostAlertLambdaVersionsW1dZfonb4SwddDKBTkwjdGgf22FPeCc6qliGHscYEY": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CostAlertLambdaFunction"
        },
        "CodeSha256": "5Q/D3M4MX/t7Up3uJfpnLSRjVzpd+kSQ0kuBvYNsobo=",
        "Description": "Scheduled Lambda to check AWS cost and alert users"
      }
    },
    "AlertProcessorLambdaVersionwbUOzU0i4lyGkV7P1Z8lZKNJsZaSbjuByXSUIuZPGVE": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "AlertProcessorLambdaFunction"
        },
        "CodeSha256": "5Q/D3M4MX/t7Up3uJfpnLSRjVzpd+kSQ0kuBvYNsobo=",
        "Description": "Scheduled alert processor for budget monitoring"
      }
    },
    "TriggerAlertsLambdaVersionP5obgAeVPFKPW9iJ2dhpcoIMAcj2BfrUn7ZAyc49j4": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "TriggerAlertsLambdaFunction"
        },
        "CodeSha256": "5Q/D3M4MX/t7Up3uJfpnLSRjVzpd+kSQ0kuBvYNsobo=",
        "Description": "Manual alert trigger API endpoint"
      }
    },
    "GetCostDataLambdaVersionf4Zc9lepIOjglMWhEVnHrrcYJFiDZN0mT6syMXvq17A": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetCostDataLambdaFunction"
        },
        "CodeSha256": "5Q/D3M4MX/t7Up3uJfpnLSRjVzpd+kSQ0kuBvYNsobo=",
        "Description": "API to fetch cost data from DynamoDB (protected)"
      }
    },
    "SesEmailVerifierLambdaVersionN5ppd4F0cGnPUOFfx03TW2eyT0vJ1gyoIWGMyZY": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "SesEmailVerifierLambdaFunction"
        },
        "CodeSha256": "5Q/D3M4MX/t7Up3uJfpnLSRjVzpd+kSQ0kuBvYNsobo=",
        "Description": "Automatically verify user emails in SES after Cognito confirmation"
      }
    },
    "CostAlertEventsRuleSchedule1": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "ScheduleExpression": "rate(1 day)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "CostAlertLambdaFunction",
                "Arn"
              ]
            },
            "Id": "costAlertSchedule"
          }
        ]
      }
    },
    "CostAlertLambdaPermissionEventsRuleSchedule1": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CostAlertLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "CostAlertEventsRuleSchedule1",
            "Arn"
          ]
        }
      }
    },
    "AlertProcessorEventsRuleSchedule1": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "ScheduleExpression": "rate(1 hour)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "AlertProcessorLambdaFunction",
                "Arn"
              ]
            },
            "Id": "alertProcessorSchedule"
          }
        ]
      }
    },
    "AlertProcessorLambdaPermissionEventsRuleSchedule1": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "AlertProcessorLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "AlertProcessorEventsRuleSchedule1",
            "Arn"
          ]
        }
      }
    },
    "ApiGatewayRestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "dev-CostGuard",
        "EndpointConfiguration": {
          "Types": [
            "EDGE"
          ]
        },
        "Policy": ""
      }
    },
    "ApiGatewayResourceAuth": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "auth",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceAuthSignup": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceAuth"
        },
        "PathPart": "signup",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceAuthSignin": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceAuth"
        },
        "PathPart": "signin",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceAuthRefresh": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceAuth"
        },
        "PathPart": "refresh",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceAuthProfile": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceAuth"
        },
        "PathPart": "profile",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceBudget": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "budget",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceBudgetSet": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceBudget"
        },
        "PathPart": "set",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceAlerts": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "alerts",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceAlertsTrigger": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceAlerts"
        },
        "PathPart": "trigger",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceCostDashusage": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "cost-usage",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodAuthSignupOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceAuthSignup"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodAuthSigninOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceAuthSignin"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodAuthRefreshOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceAuthRefresh"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodAuthProfileOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT,GET'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceAuthProfile"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodBudgetSetOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceBudgetSet"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodBudgetOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceBudget"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodAlertsTriggerOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceAlertsTrigger"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodCostDashusageOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceCostDashusage"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodAuthSignupPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceAuthSignup"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "SignUpLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "SignUpLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodAuthSigninPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceAuthSignin"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "SignInLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "SignInLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodAuthRefreshPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceAuthRefresh"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "RefreshTokenLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "RefreshTokenLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodAuthProfileGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceAuthProfile"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetUserProfileLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetUserProfileLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodAuthProfilePut": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "PUT",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceAuthProfile"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "UpdateUserProfileLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "UpdateUserProfileLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodBudgetSetPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceBudgetSet"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "SetBudgetLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "SetBudgetLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodBudgetGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceBudget"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetBudgetLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetBudgetLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodAlertsTriggerPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceAlertsTrigger"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "TriggerAlertsLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "TriggerAlertsLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodCostDashusageGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceCostDashusage"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetCostDataLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetCostDataLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayDeployment1751050103908": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "StageName": "dev"
      },
      "DependsOn": [
        "ApiGatewayMethodAuthSignupOptions",
        "ApiGatewayMethodAuthSigninOptions",
        "ApiGatewayMethodAuthRefreshOptions",
        "ApiGatewayMethodAuthProfileOptions",
        "ApiGatewayMethodBudgetSetOptions",
        "ApiGatewayMethodBudgetOptions",
        "ApiGatewayMethodAlertsTriggerOptions",
        "ApiGatewayMethodCostDashusageOptions",
        "ApiGatewayMethodAuthSignupPost",
        "ApiGatewayMethodAuthSigninPost",
        "ApiGatewayMethodAuthRefreshPost",
        "ApiGatewayMethodAuthProfileGet",
        "ApiGatewayMethodAuthProfilePut",
        "ApiGatewayMethodBudgetSetPost",
        "ApiGatewayMethodBudgetGet",
        "ApiGatewayMethodAlertsTriggerPost",
        "ApiGatewayMethodCostDashusageGet"
      ]
    },
    "SignUpLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "SignUpLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "SignInLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "SignInLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "RefreshTokenLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "RefreshTokenLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetUserProfileLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetUserProfileLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "UpdateUserProfileLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateUserProfileLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "SetBudgetLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "SetBudgetLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetBudgetLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetBudgetLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "TriggerAlertsLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "TriggerAlertsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetCostDataLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetCostDataLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "AlertSNSTopic": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "TopicName": "CostGuard-budget-alerts-dev",
        "DisplayName": "CostGuard Budget Alerts"
      }
    },
    "CostGuardUserPool": {
      "Type": "AWS::Cognito::UserPool",
      "Properties": {
        "UserPoolName": "CostGuard-user-pool-dev",
        "UsernameAttributes": [
          "email"
        ],
        "AutoVerifiedAttributes": [
          "email"
        ],
        "Policies": {
          "PasswordPolicy": {
            "MinimumLength": 8,
            "RequireUppercase": true,
            "RequireLowercase": true,
            "RequireNumbers": true,
            "RequireSymbols": true
          }
        },
        "Schema": [
          {
            "Name": "email",
            "AttributeDataType": "String",
            "Required": true,
            "Mutable": true
          },
          {
            "Name": "given_name",
            "AttributeDataType": "String",
            "Required": true,
            "Mutable": true
          },
          {
            "Name": "family_name",
            "AttributeDataType": "String",
            "Required": true,
            "Mutable": true
          }
        ],
        "EmailConfiguration": {
          "EmailSendingAccount": "COGNITO_DEFAULT"
        }
      }
    },
    "SesEmailVerifierCognitoPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Ref": "SesEmailVerifierLambdaFunction"
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "cognito-idp.amazonaws.com",
        "SourceArn": {
          "Fn::Sub": [
            "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${UserPoolId}",
            {
              "UserPoolId": {
                "Ref": "CostGuardUserPool"
              }
            }
          ]
        }
      }
    },
    "CostGuardUserPoolClient": {
      "Type": "AWS::Cognito::UserPoolClient",
      "Properties": {
        "ClientName": "CostGuard-user-pool-client-dev",
        "UserPoolId": {
          "Ref": "CostGuardUserPool"
        },
        "GenerateSecret": false,
        "ExplicitAuthFlows": [
          "ALLOW_ADMIN_USER_PASSWORD_AUTH",
          "ALLOW_USER_PASSWORD_AUTH",
          "ALLOW_REFRESH_TOKEN_AUTH"
        ],
        "AccessTokenValidity": 24,
        "IdTokenValidity": 24,
        "RefreshTokenValidity": 30,
        "TokenValidityUnits": {
          "AccessToken": "hours",
          "IdToken": "hours",
          "RefreshToken": "days"
        }
      }
    },
    "CloudBudgetSettingsTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "CostGuard-cloud-budget-settings-dev",
        "AttributeDefinitions": [
          {
            "AttributeName": "userId",
            "AttributeType": "S"
          },
          {
            "AttributeName": "budgetId",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "userId",
            "KeyType": "HASH"
          },
          {
            "AttributeName": "budgetId",
            "KeyType": "RANGE"
          }
        ],
        "BillingMode": "PROVISIONED",
        "ProvisionedThroughput": {
          "ReadCapacityUnits": 5,
          "WriteCapacityUnits": 5
        },
        "StreamSpecification": {
          "StreamViewType": "NEW_AND_OLD_IMAGES"
        }
      }
    },
    "UsersTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "CostGuard-users-dev",
        "AttributeDefinitions": [
          {
            "AttributeName": "userId",
            "AttributeType": "S"
          },
          {
            "AttributeName": "email",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "userId",
            "KeyType": "HASH"
          }
        ],
        "GlobalSecondaryIndexes": [
          {
            "IndexName": "EmailIndex",
            "KeySchema": [
              {
                "AttributeName": "email",
                "KeyType": "HASH"
              }
            ],
            "Projection": {
              "ProjectionType": "ALL"
            },
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 5,
              "WriteCapacityUnits": 5
            }
          }
        ],
        "BillingMode": "PROVISIONED",
        "ProvisionedThroughput": {
          "ReadCapacityUnits": 5,
          "WriteCapacityUnits": 5
        },
        "StreamSpecification": {
          "StreamViewType": "NEW_AND_OLD_IMAGES"
        }
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": "serverless-framework-deployments-us-east-1-de0c9720-9574",
      "Export": {
        "Name": "sls-CostGuard-dev-ServerlessDeploymentBucketName"
      }
    },
    "SignUpLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "SignUpLambdaVersionrA4VNHd9X32PtkIZeKEdFOw8KSe7o86yEwB34N0uA"
      },
      "Export": {
        "Name": "sls-CostGuard-dev-SignUpLambdaFunctionQualifiedArn"
      }
    },
    "SignInLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "SignInLambdaVersion8sMvixCWO1lo1Vgwyp8huE5azTpFNIfuSS7iHyDqwkQ"
      },
      "Export": {
        "Name": "sls-CostGuard-dev-SignInLambdaFunctionQualifiedArn"
      }
    },
    "RefreshTokenLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "RefreshTokenLambdaVersiongjyvC5EhFICmfr8I9vJlbVCZSeaNI1l5EF8lJzZogE"
      },
      "Export": {
        "Name": "sls-CostGuard-dev-RefreshTokenLambdaFunctionQualifiedArn"
      }
    },
    "GetUserProfileLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetUserProfileLambdaVersion3ZkmrwPchYbnpkawSrl49byP7rtml5TTnykZ3FIxKyc"
      },
      "Export": {
        "Name": "sls-CostGuard-dev-GetUserProfileLambdaFunctionQualifiedArn"
      }
    },
    "UpdateUserProfileLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdateUserProfileLambdaVersionqDrOGsSpts83S2ose65ztmtvnXoLM5mxWa8feirA"
      },
      "Export": {
        "Name": "sls-CostGuard-dev-UpdateUserProfileLambdaFunctionQualifiedArn"
      }
    },
    "SetBudgetLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "SetBudgetLambdaVersionoFC7UJTcEtRCtlM0b2wZlVxavlBNfHJteRIehVNOY"
      },
      "Export": {
        "Name": "sls-CostGuard-dev-SetBudgetLambdaFunctionQualifiedArn"
      }
    },
    "GetBudgetLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetBudgetLambdaVersionQsslNekAxkhGokYdIZjmh0s3x57hAqv7tENMqyNuSlY"
      },
      "Export": {
        "Name": "sls-CostGuard-dev-GetBudgetLambdaFunctionQualifiedArn"
      }
    },
    "CostAlertLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CostAlertLambdaVersionsW1dZfonb4SwddDKBTkwjdGgf22FPeCc6qliGHscYEY"
      },
      "Export": {
        "Name": "sls-CostGuard-dev-CostAlertLambdaFunctionQualifiedArn"
      }
    },
    "AlertProcessorLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "AlertProcessorLambdaVersionwbUOzU0i4lyGkV7P1Z8lZKNJsZaSbjuByXSUIuZPGVE"
      },
      "Export": {
        "Name": "sls-CostGuard-dev-AlertProcessorLambdaFunctionQualifiedArn"
      }
    },
    "TriggerAlertsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "TriggerAlertsLambdaVersionP5obgAeVPFKPW9iJ2dhpcoIMAcj2BfrUn7ZAyc49j4"
      },
      "Export": {
        "Name": "sls-CostGuard-dev-TriggerAlertsLambdaFunctionQualifiedArn"
      }
    },
    "GetCostDataLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetCostDataLambdaVersionf4Zc9lepIOjglMWhEVnHrrcYJFiDZN0mT6syMXvq17A"
      },
      "Export": {
        "Name": "sls-CostGuard-dev-GetCostDataLambdaFunctionQualifiedArn"
      }
    },
    "SesEmailVerifierLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "SesEmailVerifierLambdaVersionN5ppd4F0cGnPUOFfx03TW2eyT0vJ1gyoIWGMyZY"
      },
      "Export": {
        "Name": "sls-CostGuard-dev-SesEmailVerifierLambdaFunctionQualifiedArn"
      }
    },
    "ServiceEndpoint": {
      "Description": "URL of the service endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiGatewayRestApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            },
            "/dev"
          ]
        ]
      },
      "Export": {
        "Name": "sls-CostGuard-dev-ServiceEndpoint"
      }
    },
    "UserPoolId": {
      "Value": {
        "Ref": "CostGuardUserPool"
      },
      "Export": {
        "Name": "CostGuard-user-pool-id-dev"
      }
    },
    "UserPoolClientId": {
      "Value": {
        "Ref": "CostGuardUserPoolClient"
      },
      "Export": {
        "Name": "CostGuard-user-pool-client-id-dev"
      }
    },
    "CloudBudgetSettingsTableName": {
      "Value": {
        "Ref": "CloudBudgetSettingsTable"
      },
      "Export": {
        "Name": "CostGuard-cloud-budget-settings-table-dev"
      }
    }
  }
}