# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: zenchatai
# "service" is the name of this project. This will also be added to your AWS resource names.
service: CostGuard
app: costguard

provider:
  name: aws
  runtime: nodejs22.x
  region: us-east-1
  environment:
    COST_ALERT_TOPIC: ${env:COST_ALERT_TOPIC}
    COST_ALERT_TABLE: ${env:COST_ALERT_TABLE}
    DAILY_THRESHOLD_PERCENT: ${env:DAILY_THRESHOLD_PERCENT}
    MONTHLY_BUDGET: ${env:MONTHLY_BUDGET}
    AWS_ACCOUNT_ID: ${env:AWS_ACCOUNT_ID, ""}
    USER_POOL_ID: !Ref CostGuardUserPool
    USER_POOL_CLIENT_ID: !Ref CostGuardUserPoolClient
    USERS_TABLE: !Ref UsersTable
    CLOUD_BUDGET_SETTINGS_TABLE: !Ref CloudBudgetSettingsTable
    JWT_SECRET: ${env:JWT_SECRET, "your-jwt-secret-key"}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - ce:GetCostAndUsage
            - ce:GetDimensionValues
            - ce:GetUsageReport
          Resource: "*"
        - Effect: Allow
          Action:
            - budgets:ViewBudget
            - budgets:DescribeBudgets
            - budgets:DescribeBudget
          Resource: "*"
        - Effect: Allow
          Action:
            - sts:GetCallerIdentity
          Resource: "*"
        - Effect: Allow
          Action:
            - cognito-idp:AdminCreateUser
            - cognito-idp:AdminSetUserPassword
            - cognito-idp:AdminInitiateAuth
            - cognito-idp:AdminGetUser
            - cognito-idp:AdminUpdateUserAttributes
            - cognito-idp:AdminDeleteUser
            - cognito-idp:ListUsers
            - cognito-idp:UpdateUserPool
            - cognito-idp:DescribeUserPool
          Resource: !GetAtt CostGuardUserPool.Arn
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - !GetAtt UsersTable.Arn
            - !Sub "${UsersTable.Arn}/index/*"
            - !GetAtt CloudBudgetSettingsTable.Arn
            - !Sub "${CloudBudgetSettingsTable.Arn}/index/*"
            - !GetAtt AWSAccountsTable.Arn
            - !Sub "${AWSAccountsTable.Arn}/index/*"
        - Effect: Allow
          Action:
            - sns:Publish
            - ses:SendEmail
            - ses:SendRawEmail
            - ses:VerifyEmailIdentity
            - ses:ListVerifiedEmailAddresses
            - ses:GetIdentityVerificationAttributes
          Resource: "*"

functions:
  # Authentication Functions
  signUp:
    handler: src/functions/Auth/signUp.handler
    description: "User registration with Cognito"
    events:
      - http:
          path: auth/signup
          method: post
          cors: true

  signIn:
    handler: src/functions/Auth/signIn.handler
    description: "User login with Cognito"
    events:
      - http:
          path: auth/signin
          method: post
          cors: true

  refreshToken:
    handler: src/functions/Auth/refreshToken.handler
    description: "Refresh JWT token"
    events:
      - http:
          path: auth/refresh
          method: post
          cors: true

  getUserProfile:
    handler: src/functions/Auth/getUserProfile.handler
    description: "Get user profile information"
    events:
      - http:
          path: auth/profile
          method: get
          cors: true

  updateUserProfile:
    handler: src/functions/Auth/updateUserProfile.handler
    description: "Update user profile information"
    events:
      - http:
          path: auth/profile
          method: put
          cors: true

  # Budget Management Functions
  setBudget:
    handler: src/functions/Budget/setBudgetHandler.handler
    description: "Set or update user's cloud budget settings"
    events:
      - http:
          path: budget/set
          method: post
          cors: true

  getBudget:
    handler: src/functions/Budget/getBudgetHandler.handler
    description: "Get user's current budget settings"
    events:
      - http:
          path: budget
          method: get
          cors: true

  deleteBudget:
    handler: src/functions/Budget/deleteBudgetHandler.handler
    description: "Delete a user's budget by ID"
    events:
      - http:
          path: budget/{budgetId}
          method: delete
          cors: true

  # Cost Alert Functions
  costAlert:
    handler: src/functions/CostAlert/costAlertHandler.handler
    description: "Scheduled Lambda to check AWS cost and alert users"
    events:
      - schedule: rate(1 day)

  # AWS Account Management Functions
  validateAWSAccount:
    handler: src/functions/AWS/accountValidator.handler
    description: "Validate AWS credentials and retrieve account data"
    memorySize: 512
    events:
      - http:
          path: aws/validate-account
          method: post
          cors: true
    environment:
      AWS_ACCOUNTS_TABLE: !Ref AWSAccountsTable

  fetchAWSAccounts:
    handler: src/functions/AWS/fetchAccounts.handler
    description: "Fetch all AWS accounts for authenticated user"
    memorySize: 256
    events:
      - http:
          path: aws/accounts
          method: get
          cors: true
    environment:
      AWS_ACCOUNTS_TABLE: !Ref AWSAccountsTable

  # Budget Threshold Monitor
  budgetThresholdMonitor:
    handler: src/functions/Alerts/budgetThresholdMonitor.handler
    description: "Monitor budget thresholds every minute and send email alerts"
    timeout: 60
    memorySize: 512
    events:
      - schedule:
          rate: rate(1 minute)
          enabled: true
    environment:
      CLOUD_BUDGET_SETTINGS_TABLE: !Ref CloudBudgetSettingsTable
      FROM_EMAIL: ${env:FROM_EMAIL, "muhammadquanit@gmail.com"}

  triggerAlerts:
    handler: src/functions/Alerts/triggerAlerts.handler
    description: "Manual alert trigger API endpoint"
    timeout: 29
    memorySize: 1024
    events:
      - http:
          path: alerts/trigger
          method: post
          cors: true
    environment:
      CLOUD_BUDGET_SETTINGS_TABLE: !Ref CloudBudgetSettingsTable
      ALERT_SNS_TOPIC: !Ref AlertSNSTopic
      FROM_EMAIL: ${env:FROM_EMAIL, "muhammadquanit@gmail.com"}
      DEFAULT_ALERT_EMAIL: ${env:DEFAULT_ALERT_EMAIL, "muhammadquanit@gmail.com"}

  getCostData:
    handler: src/functions/CostData/index.GetCostAndUsageHandler
    description: "API to fetch cost data from DynamoDB (protected)"
    events:
      - http:
          path: cost-usage
          method: get
          cors: true

  # SES Email Verifier - Cognito Post-Confirmation Trigger
  sesEmailVerifier:
    handler: src/functions/Auth/sesEmailVerifier.handler
    description: "Automatically verify user emails in SES after Cognito confirmation"
    timeout: 30
    events:
      - cognitoUserPool:
          pool: CostGuardUserPool
          trigger: PostConfirmation

resources:
  Resources:
    # SNS Topic for Budget Alerts
    AlertSNSTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:service}-budget-alerts-${sls:stage}
        DisplayName: CostGuard Budget Alerts

    # Cognito User Pool
    CostGuardUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:service}-user-pool-${sls:stage}
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireUppercase: true
            RequireLowercase: true
            RequireNumbers: true
            RequireSymbols: true
        Schema:
          - Name: email
            AttributeDataType: String
            Required: true
            Mutable: true
          - Name: given_name
            AttributeDataType: String
            Required: true
            Mutable: true
          - Name: family_name
            AttributeDataType: String
            Required: true
            Mutable: true
        EmailConfiguration:
          EmailSendingAccount: COGNITO_DEFAULT

    # Cognito User Pool Client
    CostGuardUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:service}-user-pool-client-${sls:stage}
        UserPoolId: !Ref CostGuardUserPool
        GenerateSecret: false
        ExplicitAuthFlows:
          - ALLOW_ADMIN_USER_PASSWORD_AUTH
          - ALLOW_USER_PASSWORD_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        AccessTokenValidity: 24
        IdTokenValidity: 24
        RefreshTokenValidity: 30
        TokenValidityUnits:
          AccessToken: hours
          IdToken: hours
          RefreshToken: days

    # DynamoDB CloudBudgetSettings Table
    CloudBudgetSettingsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-cloud-budget-settings-${sls:stage}
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: budgetId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: budgetId
            KeyType: RANGE
        BillingMode: PROVISIONED
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES

    # DynamoDB AWS Accounts Table
    AWSAccountsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-aws-accounts-${sls:stage}
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: accountId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: accountId
            KeyType: RANGE
        BillingMode: PROVISIONED
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES

    # DynamoDB Users Table
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-users-${sls:stage}
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: EmailIndex
            KeySchema:
              - AttributeName: email
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 5
              WriteCapacityUnits: 5
        BillingMode: PROVISIONED
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES

  Outputs:
    UserPoolId:
      Value: !Ref CostGuardUserPool
      Export:
        Name: ${self:service}-user-pool-id-${sls:stage}

    UserPoolClientId:
      Value: !Ref CostGuardUserPoolClient
      Export:
        Name: ${self:service}-user-pool-client-id-${sls:stage}

    CloudBudgetSettingsTableName:
      Value: !Ref CloudBudgetSettingsTable
      Export:
        Name: ${self:service}-cloud-budget-settings-table-${sls:stage}

plugins:
  - serverless-plugin-common-excludes
  - serverless-plugin-include-dependencies

package:
  patterns:
    - "!.git/**"
    - "!.vscode/**"
    - "!tests/**"
    - "!docs/**"
    - "!*.md"
    - "!.env"
    - "!.gitignore"
    - "!test-auth.js"
    - "!node_modules/**"
    - "!.serverless/**"
    - "!coverage/**"
    - "!jest.config.js"
    - "!eslint.config.js"
    - "!docs/test-alert-system-with-threshold.sh"
    - "!docs/test-alert-system.sh"
    - "!docs/test-api.sh"
